// Mocks generated by Mockito 5.3.0 from annotations
// in todoapp/test/mock/domain/repository/todos_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todoapp/domain/model/todo.dart' as _i3;
import 'package:todoapp/domain/model/todo_list.dart' as _i2;
import 'package:todoapp/domain/repository/todos_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoList_0 extends _i1.SmartFake implements _i2.TodoList {
  _FakeTodoList_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTodo_1 extends _i1.SmartFake implements _i3.Todo {
  _FakeTodo_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TodosRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosRepository extends _i1.Mock implements _i4.TodosRepository {
  MockTodosRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TodoList> getTodoList() =>
      (super.noSuchMethod(Invocation.method(#getTodoList, []),
              returnValue: _i5.Future<_i2.TodoList>.value(
                  _FakeTodoList_0(this, Invocation.method(#getTodoList, []))))
          as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i2.TodoList> patchTodoList(
          int? revision, _i2.TodoList? todoList) =>
      (super.noSuchMethod(
              Invocation.method(#patchTodoList, [revision, todoList]),
              returnValue: _i5.Future<_i2.TodoList>.value(_FakeTodoList_0(this,
                  Invocation.method(#patchTodoList, [revision, todoList]))))
          as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i3.Todo> createTodo(
          int? revision, String? title, int? dueDate, String? importance) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createTodo, [revision, title, dueDate, importance]),
              returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(this,
                  Invocation.method(#createTodo, [revision, title, dueDate, importance]))))
          as _i5.Future<_i3.Todo>);
  @override
  _i5.Future<void> updateTodo(
          int? revision,
          String? id,
          int? createdAt,
          String? title,
          String? lastUpdatedBy,
          int? changedAt,
          int? dueDate,
          String? color,
          bool? isCompleted,
          String? importance) =>
      (super.noSuchMethod(
              Invocation.method(#updateTodo, [
                revision,
                id,
                createdAt,
                title,
                lastUpdatedBy,
                changedAt,
                dueDate,
                color,
                isCompleted,
                importance
              ]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> deleteTodo(String? id, int? revision) => (super.noSuchMethod(
      Invocation.method(#deleteTodo, [id, revision]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.Todo> getTodo(String? id) =>
      (super.noSuchMethod(Invocation.method(#getTodo, [id]),
              returnValue: _i5.Future<_i3.Todo>.value(
                  _FakeTodo_1(this, Invocation.method(#getTodo, [id]))))
          as _i5.Future<_i3.Todo>);
}
