// Mocks generated by Mockito 5.3.0 from annotations
// in todoapp/test/mock/datasource/todos_database_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todoapp/data/datasource/todos_database.dart' as _i4;
import 'package:todoapp/domain/model/todo.dart' as _i3;
import 'package:todoapp/domain/model/todo_list.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoList_0 extends _i1.SmartFake implements _i2.TodoList {
  _FakeTodoList_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTodo_1 extends _i1.SmartFake implements _i3.Todo {
  _FakeTodo_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [TodosDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosDatabase extends _i1.Mock implements _i4.TodosDatabase {
  MockTodosDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TodoList> allTodos() =>
      (super.noSuchMethod(Invocation.method(#allTodos, []),
              returnValue: _i5.Future<_i2.TodoList>.value(
                  _FakeTodoList_0(this, Invocation.method(#allTodos, []))))
          as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i2.TodoList> patchTodos(_i2.TodoList? todoList, int? revision) =>
      (super.noSuchMethod(Invocation.method(#patchTodos, [todoList, revision]),
              returnValue: _i5.Future<_i2.TodoList>.value(_FakeTodoList_0(
                  this, Invocation.method(#patchTodos, [todoList, revision]))))
          as _i5.Future<_i2.TodoList>);
  @override
  _i5.Future<_i3.Todo> insertTodo(_i3.Todo? todo, int? revision) =>
      (super.noSuchMethod(Invocation.method(#insertTodo, [todo, revision]),
              returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
                  this, Invocation.method(#insertTodo, [todo, revision]))))
          as _i5.Future<_i3.Todo>);
  @override
  _i5.Future<void> updateTodo(_i3.Todo? todo, int? revision) =>
      (super.noSuchMethod(Invocation.method(#updateTodo, [todo, revision]),
              returnValue: _i5.Future<void>.value(),
              returnValueForMissingStub: _i5.Future<void>.value())
          as _i5.Future<void>);
  @override
  _i5.Future<void> deleteTodo(String? id, int? revision) => (super.noSuchMethod(
      Invocation.method(#deleteTodo, [id, revision]),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i3.Todo> getTodo(String? id) =>
      (super.noSuchMethod(Invocation.method(#getTodo, [id]),
              returnValue: _i5.Future<_i3.Todo>.value(
                  _FakeTodo_1(this, Invocation.method(#getTodo, [id]))))
          as _i5.Future<_i3.Todo>);
}
